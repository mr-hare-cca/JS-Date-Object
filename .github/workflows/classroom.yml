name: autograde

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # ... (Install, setup, and config steps are all correct) ...
      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29
      - name: Write jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF
      - name: Write jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF
      
      # ... (Write tests step is correct) ...
      - name: Write tests
        run: |
          mkdir -p __tests__
          cat > __tests__/date-8_8.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          const wait = (ms=40) => new Promise(r => setTimeout(r, ms));
          const find = arr => arr.find(p => fs.existsSync(p)) || null;
          const findIndex = () => find(['index.html','public/index.html','src/index.html','docs/index.html']);

          const dayNames = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

          function byId(doc, id) { return doc.getElementById(id); }
          function text(doc, id) {
            const el = byId(doc, id);
            return (el?.textContent || el?.innerText || '').trim();
          }
          function click(doc, id) { byId(doc, id).click(); }

          async function loadDOM() {
            const idx = findIndex();
            if (!idx) throw new Error('index.html not found (root/public/src/docs).');

            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // silence script console errors in CI

            const baseDir = path.dirname(path.resolve(idx));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';

            const dom = await JSDOM.fromFile(idx, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            // ban prompt/alert usage (write to page, not dialogs)
            dom.window.prompt = () => { throw new Error('Use inputs/DOM, not prompt().'); };
            dom.window.alert  = () => { throw new Error('Write to the page, not alert().'); };

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          describe('Unit 8.8 – The Date Object', () => {
            let dom, window, document;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
            });

            test('required elements exist', () => {
              ['myDate','myTimer','myBtn'].forEach(id =>
                expect(document.getElementById(id)).not.toBeNull()
              );
            });

            test('button uses addEventListener and no inline onclick', () => {
              const btn = document.getElementById('myBtn');
              expect(btn).not.toBeNull();
              expect(btn.getAttribute('onclick')).toBeNull();
            });

            test('date format looks like "Day, M/D/YYYY" and matches today', () => {
              const s = text(document, 'myDate');
              expect(/^[A-Za-z]+,\s*\d{1,2}\/\d{1,2}\/\d{4}$/.test(s)).toBe(true);

              const [head, tail] = s.split(',');
              const dow = head.trim();
              expect(dayNames.includes(dow)).toBe(true);

              const [m,d,y] = tail.trim().split('/').map(Number);
              const now = new Date();
              expect(m).toBe(now.getMonth()+1);
              expect(d).toBe(now.getDate());
              expect(y).toBe(now.getFullYear());
            });

            test('timer runs and increases after ~120ms', async () => {
              const before = parseFloat(text(document, 'myTimer') || '0');
              await wait(140);
              const after = parseFloat(text(document, 'myTimer') || '0');
              expect(after).toBeGreaterThan(before + 0.05);
            });

            test('toggle button stops and resumes timer, text flips Start/Stop', async () => {
              const btn = byId(document, 'myBtn');
              const v1 = parseFloat(text(document, 'myTimer') || '0');
              click(document, 'myBtn'); // stop
              await wait(150);
              const v2 = parseFloat(text(document, 'myTimer') || '0');
              expect(v2).toBeCloseTo(v1, 2);
              expect(btn.textContent.trim().toLowerCase()).toBe('start');

              click(document, 'myBtn'); // start
              await wait(150);
              const v3 = parseFloat(text(document, 'myTimer') || '0');
              expect(v3).toBeGreaterThan(v2 + 0.05);
              expect(btn.textContent.trim().toLowerCase()).toBe('stop');
            });

            test('elapsed time is monotonic while running', async () => {
              const btn = byId(document, 'myBtn');
              if (btn.textContent.trim().toLowerCase() === 'start') {
                click(document, 'myBtn');
                await wait(60);
              }
              const a = parseFloat(text(document, 'myTimer') || '0');
              await wait(80);
              const b = parseFloat(text(document, 'myTimer') || '0');
              await wait(80);
              const c = parseFloat(text(document, 'myTimer') || '0');
              expect(b).toBeGreaterThan(a);
              expect(c).toBeGreaterThan(b);
            });
          });
          EOF

      # === Individual graded runs (camelCase IDs) ===
      - id: tRequired
        name: required elements exist
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: required elements exist
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "required elements exist$"
          timeout: 60
          max-score: 10

      - id: tListener
        name: no inline onclick; uses addEventListener
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: no inline onclick; uses addEventListener
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "button uses addEventListener and no inline onclick$"
          timeout: 60
          max-score: 15

      #
      # ⬇️ *** THIS IS THE FIX *** ⬇️
      #
      - id: tDateFormat
        name: date format and today match
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: date format and today match
          setup-command: echo "ready"
          # Use single quotes to wrap the whole command so the inner double quotes are preserved
          command: 'npx jest --runInBand --testNamePattern "date format looks like \"Day, M/D/YYYY\" and matches today$"'
          timeout: 60
          max-score: 20

      - id: tTimerRuns
        name: timer runs (+0.05s after ~120ms)
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: timer runs (+0.05s after ~120ms)
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "timer runs and increases after ~120ms$"
          timeout: 60
          max-score: 20

      - id: tToggleWorks
        name: toggle stops/resumes; text flips
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: toggle stops/resumes; text flips
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "toggle button stops and resumes timer, text flips Start/Stop$"
          timeout: 60
          max-score: 20

      - id: tElapsedMonotonic
        name: elapsed is monotonic while running
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: elapsed is monotonic while running
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern "elapsed time is monotonic while running$"
          timeout: 60
          max-score: 15

      # ... (Summary and reporter steps are correct) ...
      - name: Build & publish combined summary (console + Summary tab)
        shell: bash
        run: |
          npx jest --runInBand --json --outputFile=jest-summary.json || true
          node - <<'NODE'
          const fs = require('fs');
          let jr = {};
          try { jr = JSON.parse(fs.readFileSync('jest-summary.json','utf8')); } catch {}
          const assertions = (jr.testResults||[]).flatMap(t => t.assertionResults || []);
          const wanted = [
            'required elements exist',
            'button uses addEventListener and no inline onclick',
            'date format looks like "Day, M/D/YYYY" and matches today',
            'timer runs and increases after ~120ms',
            'toggle button stops and resumes timer, text flips Start/Stop',
            'elapsed time is monotonic while running'
          ];
          const idToPoints = {
            'required elements exist': 10,
            'button uses addEventListener and no inline onclick': 15,
            'date format looks like "Day, M/D/YYYY" and matches today': 20,
            'timer runs and increases after ~120ms': 20,
            'toggle button stops and resumes timer, text flips Start/Stop': 20,
            'elapsed time is monotonic while running': 15
          };
          const status = {};
          for (const name of wanted) {
            const a = assertions.find(x => x.title === name);
            status[name] = !!a && a.status === 'passed';
          }
          const passedCount = Object.values(status).filter(Boolean).length;
          const totalScore = Object.entries(status).reduce((sum,[k,v]) => sum + (v ? idToPoints[k] : 0), 0);

          const checks = assertions.map(t => `${t.status === 'passed' ? '✅' : '❌'} ${t.title}`);
          const md = [
            `# Unit 8.8 Autograder Summary`,
            ``,
            `**Passed: ${passedCount}/${wanted.length}**`,
            `**Score: ${totalScore}/100**`,
            ``,
            ...wanted.map(n => `${status[n] ? '✅' : '❌'} ${n} (${idToPoints[n]} pts)`),
            ``,
            `## Checks`,
            ...checks,
          ].join('\n');

          console.log(md);
          const summaryPath = process.env.GITHUB_STEP_SUMMARY;
          if (summaryPath) fs.appendFileSync(summaryPath, md + '\n');
          NODE
      - name: Prepare reporter env
        id: prepEnv
        shell: bash
        run: |
          echo "T_tRequired_RESULTS=${{ steps.tRequired.outputs.result }}"           >> "$GITHUB_ENV"
          echo "T_tListener_RESULTS=${{ steps.tListener.outputs.result }}"           >> "$GITHUB_ENV"
          echo "T_tDateFormat_RESULTS=${{ steps.tDateFormat.outputs.result }}"       >> "$GITHUB_ENV"
          echo "T_tTimerRuns_RESULTS=${{ steps.tTimerRuns.outputs.result }}"         >> "$GITHUB_ENV"
          echo "T_tToggleWorks_RESULTS=${{ steps.tToggleWorks.outputs.result }}"     >> "$GITHUB_ENV"
          echo "T_tElapsedMonotonic_RESULTS=${{ steps.tElapsedMonotonic.outputs.result }}" >> "$GITHUB_ENV"
      - name: Report grades
        uses: classroom-resources/autograding-grading-reporter@v1
        with:
          runners: 'tRequired,tListener,tDateFormat,tTimerRuns,tToggleWorks,tElapsedMonotonic'
          token: ${{ github.token }}